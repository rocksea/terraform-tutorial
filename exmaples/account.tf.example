locals {
  description = "Managed by RockseaAccount"

  role_name = "RootInfrastructureAccessRole"
  role_description = "${local.description} ROLE"
  #root_user = "arn:aws:iam::xxxxxxx:root" # for role
  root_user = "arn:aws:iam::xxxxxxx:user/rocks"

  policy_name = "RootInfrastructureAccessRolePolicy"
  policy_description = "${local.description} POLICY"
}


resource "aws_organizations_account" "account" {
  name      = "rocksea"
  email     = "xxxxxxx@xxxxx.com"
  #iam_user_access_to_billing = "ALLOW"
  role_name = aws_iam_role.rocksea-role.name

  # There is no AWS Organizations API for reading role_name
  lifecycle {
    ignore_changes = [role_name]
  }
}


resource "aws_iam_role" "rocksea-role" {
  name = local.role_name
  description = local.role_description
  path = "/"
  assume_role_policy = data.aws_iam_policy_document.role.json
}


data "aws_iam_policy_document" "role" {
  statement {
    effect = "Allow"

    actions = [
      "sts:AssumeRole"
    ]

    principals {
      type = "AWS"
      identifiers = [
        local.root_user
      ]
    }
  }
}


resource "aws_iam_role_policy_attachment" "attachment" {
  policy_arn = aws_iam_policy.rocksea-policy.arn
  role = aws_iam_role.rocksea-role.name
}


resource "aws_iam_policy" "rocksea-policy" {
  name = local.policy_name
  description = local.policy_description
  policy = data.aws_iam_policy_document.policy_document.json
}


data "aws_iam_policy_document" "policy_document" {
  statement {
    effect = "Allow"
    actions = [
      "sts:*",
      "iam:get*",
      "iam:describe*",
      "iam:list*"
    ]
    resources = ["*"]
  }
  statement {
    effect = "Allow"
    actions = [
      "networkmanager:get*",
      "networkmanager:list*",
      "chatbot:*",
      "elasticloadbalancing:*",
      "serverlessrepo:*",
      "ec2:*",
      "autoscaling:*",
      "imagebuilder:*",
      "ec2-instance-connect:*",
      "ec2messages:*",
      "s3:*",
      "s3-outposts:*",
      "ssm:*",
      "sqs:*",
      "sns:*",
      "ses:*",
      "cloudwatch:*",
      "applicationinsights:*",
      "logs:*",
      "mq:*",
      "kafka:*",
      "rds:*",
      "rds-db:*",
      "dynamodb:*",
      "elasticache:*",
      "elasticbeanstalk:*",
      "apigateway:*",
      "lambda:*",
      "es:*",
      "cloudsearch:*",
      "route53:*",
      "route53resolver:*",
      "route53domains:*",
      "codedeploy:*",
      "events:*",
      "kms:*",
      "acm:*",
      "secretsmanager:*",
      "ecr:*",
      "ecs:get*",
      "ecs:list*",
      "ecs:describe*",
      "ce:get*",
      "ce:list*",
      "ce:describe*",
    ]
    resources = ["*"]
  }
}
